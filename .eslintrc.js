module.exports = {
  extends: ["plugin:security/recommended"],
  env: {
    browser: true,
    node: true,
  },
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: "tsconfig.json",
    sourceType: "module",
  },
  plugins: [
    "@typescript-eslint",
    "@typescript-eslint/tslint",
    "import",
    "jest",
    "jsx-a11y",
    "prefer-arrow",
    "react",
    "security",
  ],
  rules: {
    "@typescript-eslint/array-type": ["error", { default: "array-simple" }],
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/ban-types": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "default",
        format: ["camelCase"],
      },
      {
        selector: "function",
        format: ["camelCase"],
      },
      {
        selector: "variable",
        format: ["camelCase"],
      },
      // We need all three formats to support destructuring
      {
        selector: "variable",
        modifiers: ["const"],
        format: ["UPPER_CASE", "PascalCase", "camelCase"],
      },
      {
        selector: "class",
        format: ["PascalCase"],
      },
      {
        selector: "method",
        format: ["camelCase"],
      },
      {
        selector: "interface",
        format: ["PascalCase"],
      },
      {
        selector: "typeLike",
        format: ["PascalCase"],
      },
      {
        selector: "enum",
        format: ["PascalCase"],
      },
      {
        selector: "enumMember",
        format: ["UPPER_CASE"],
      },
      {
        selector: "property",
        format: ["camelCase", "PascalCase"],
      },
      {
        selector: "property",
        modifiers: ["static", "readonly"],
        format: ["UPPER_CASE"],
      },
      {
        selector: "typeParameter",
        format: ["PascalCase"],
      },
      {
        selector: "parameter",
        format: ["camelCase"],
        leadingUnderscore: "allow",
      },
    ],
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-definitions": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "warn",
      {
        accessibility: "explicit",
      },
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        multiline: {
          delimiter: "semi",
          requireLast: true,
        },
        singleline: {
          delimiter: "semi",
          requireLast: false,
        },
      },
    ],
    "@typescript-eslint/member-ordering": "warn",
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/prefer-namespace-keyword": "warn",
    "@typescript-eslint/prefer-readonly": "off",
    "@typescript-eslint/promise-function-async": "warn",
    "@typescript-eslint/quotes": [
      "warn",
      "double",
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    "@typescript-eslint/restrict-plus-operands": "error",
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/triple-slash-reference": "error",
    "@typescript-eslint/type-annotation-spacing": "error",
    "@typescript-eslint/unbound-method": "off",
    "camelcase": "warn",
    "comma-dangle": [
      "error",
      {
        objects: "always-multiline",
        arrays: "always-multiline",
        functions: "never",
        imports: "always-multiline",
      },
    ],
    "complexity": [
      "warn",
      {
        max: 20,
      },
    ],
    "no-param-reassign": "error",
    "constructor-super": "error",
    "curly": ["warn", "multi-line"],
    "dot-notation": "error",
    "eol-last": "warn",
    "eqeqeq": ["warn", "smart"],
    "id-blacklist": ["warn", "any", "Number", "number", "String", "string", "Boolean", "boolean"],
    "id-match": "warn",
    "import/no-deprecated": "warn",
    "import/no-extraneous-dependencies": [
      "error",
      {
        devDependencies: true,
      },
    ],
    "import/order": "off",
    "jest/no-focused-tests": "error",
    "jsx-a11y/heading-has-content": 2,
    "jsx-a11y/anchor-is-valid": "error",
    "jsx-a11y/aria-unsupported-elements": "error",
    "jsx-a11y/no-static-element-interactions": [
      "error",
      {
        handlers: ["onClick", "onMouseDown", "onMouseUp", "onKeyPress", "onKeyDown", "onKeyUp"],
      },
    ],
    "jsx-a11y/alt-text": [
      2,
      {
        "elements": ["img", "object", "area", 'input[type="image"]'],
        "img": ["Image"],
        "object": ["Object"],
        "area": ["Area"],
        'input[type="image"]': ["InputImage"],
      },
    ],
    "jsx-a11y/html-has-lang": "error",
    "jsx-a11y/lang": "error",
    "jsx-a11y/no-onchange": "error",
    "jsx-a11y/aria-props": "error",
    "jsx-a11y/aria-proptypes": "error",
    "jsx-a11y/aria-role": [
      2,
      {
        ignoreNonDOM: true,
      },
    ],
    "jsx-a11y/role-has-required-aria-props": "error",
    "jsx-a11y/role-supports-aria-props": "error",
    "jsx-a11y/tabindex-no-positive": "error",
    "max-classes-per-file": "off",
    "max-len": [
      "warn",
      {
        ignorePattern: "^import |^export",
        code: 140,
      },
    ],
    "max-lines": ["warn", 400],
    "max-statements": ["error", 100, { ignoreTopLevelFunctions: true }],
    "new-parens": "warn",
    "no-bitwise": "off",
    "no-caller": "warn",
    "no-cond-assign": "error",
    "no-console": "off",
    "no-delete-var": "error",
    "no-duplicate-case": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-fallthrough": "error",
    "no-invalid-this": "error",
    "no-multiple-empty-lines": "off",
    "no-new-wrappers": "warn",
    "no-redeclare": "error",
    "no-sequences": "error",
    "no-shadow": ["error", { hoist: "never" }],
    "no-sparse-arrays": "error",
    "no-with": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "off",
    "no-undef-init": "error",
    "no-unsafe-finally": "error",
    "no-unused-labels": "error",
    "no-useless-constructor": "warn",
    "no-var": "error",
    "object-shorthand": "error",
    "one-var": ["off", "never"],
    "prefer-const": "off",
    "quote-props": "off",
    "radix": "error",
    "react/no-danger": "error",
    "react/no-unused-state": "error",
    "security/detect-non-literal-fs-filename": "error",
    "security/detect-non-literal-require": "error",
    "security/detect-possible-timing-attacks": "error",
    "security/detect-object-injection": "off",
    "space-before-function-paren": [
      "warn",
      {
        anonymous: "never",
        asyncArrow: "always",
        named: "never",
      },
    ],
    "spaced-comment": ["off", "never"],
    "use-isnan": "warn",
    "@typescript-eslint/tslint/config": [
      "error",
      {
        rules: {
          "encoding": true,
          "import-spacing": true,
          "no-reference-import": true,
          "one-line": [true, "check-catch", "check-else", "check-finally", "check-open-brace", "check-whitespace"],
          "static-this": true,
          "typedef": true,
          "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-module",
            "check-operator",
            "check-rest-spread",
            "check-separator",
            "check-type",
            "check-typecast",
          ],
        },
      },
    ],
    "no-constant-condition": "error",
    "no-control-regex": "error",
    "no-extra-semi": "error",
    "no-invalid-regexp": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-regex-spaces": "error",
    "no-restricted-syntax": ["error", "ForInStatement"],
  },
  settings: {
    "react": {
      version: "detect", // version should be specified for eslint-plugin-react plugin
    },
    "import/resolver": {
      typescript: {},
    },
  },
};
